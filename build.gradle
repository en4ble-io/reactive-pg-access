plugins {
    id "org.jetbrains.kotlin.jvm" version '1.3.50'
//    id "org.jlleitschuh.gradle.ktlint" version "7.1.0"
    // checks for new versions, run: gradlew dependencyUpdates
    id "com.github.ben-manes.versions" version "0.20.0"
}

allprojects {
    group = 'io.en4ble.reactive-pg-access'
    version = '0.1-SNAPSHOT'

    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    // set these properties either in ~/.gradle/gradle.properties or via circleci
    def repoKey = System.getenv("EN4BLE_REPO_AWS_ACCESS_KEY")
    def repoSecret = System.getenv("EN4BLE_REPO_AWS_SECRET_KEY")
    if (repoKey == null) {
        if (project.hasProperty('EN4BLE_REPO_AWS_ACCESS_KEY')) {
            repoKey = EN4BLE_REPO_AWS_ACCESS_KEY
        } else {
            repoKey = ""
        }
    }
    if (repoSecret == null) {
        if (project.hasProperty('EN4BLE_REPO_AWS_SECRET_KEY')) {
            repoSecret = EN4BLE_REPO_AWS_SECRET_KEY
        } else {
            repoSecret = ""
        }
    }

    repositories {
        mavenLocal()
        jcenter()
    }

    publishing {
        repositories {
            maven {
                credentials(AwsCredentials) {
                    accessKey repoKey
                    secretKey repoSecret
                }
                url "s3://repo.en4ble.io.s3-ap-southeast-1.amazonaws.com"
            }
        }
    }
}

subprojects {
    apply plugin: 'kotlin'
//    apply plugin: "org.jlleitschuh.gradle.ktlint"

    compileKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = '1.8'
        }
    }

    // set source encoding to UTF-8 for Java. Kotlin uses UTF-8 by default.
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.deprecation = true
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set('sources')
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }

    // build the archiveBaseName (for the jar) using 3 levels. TODO: find a way to support n levels
    archivesBaseName = "${project.parent.name}-${project.name}"
    archivesBaseName = "${archivesBaseName.startsWith(rootProject.name) ? archivesBaseName : rootProject.name + '-' + archivesBaseName}"

    configurations {
        tests
    }

    task packageTests(type: Jar) {
        archiveClassifier.set('tests')
        archiveBaseName.set("${project.archivesBaseName}")
        from sourceSets.test.output
    }

    artifacts {
        archives sourcesJar
//        archives javadocJar
        archives packageTests
        tests packageTests
    }

    idea {
        module {
            downloadJavadoc = false
            downloadSources = true
        }
    }
}
