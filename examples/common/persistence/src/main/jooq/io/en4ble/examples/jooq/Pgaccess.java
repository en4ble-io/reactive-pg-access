/*
 * This file is generated by jOOQ.
 */
package io.en4ble.examples.jooq;


import io.en4ble.examples.jooq.tables.Conference;
import io.en4ble.examples.jooq.tables.ConferenceV1;
import io.en4ble.examples.jooq.tables.Example;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Sequence;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
public class Pgaccess extends SchemaImpl implements Serializable, Cloneable {

    private static final long serialVersionUID = -1840081993;

    /**
     * The reference instance of <code>pgaccess</code>
     */
    public static final Pgaccess PGACCESS = new Pgaccess();

    /**
     * The table <code>pgaccess.conference_v1</code>.
     */
    public final ConferenceV1 CONFERENCE_V1 = io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1;

    /**
     * A simple conference.
     */
    public final Conference CONFERENCE = io.en4ble.examples.jooq.tables.Conference.CONFERENCE;

    /**
     * An example table containing all datatypes that are supported by reactive-pg-access.
     */
    public final Example EXAMPLE = io.en4ble.examples.jooq.tables.Example.EXAMPLE;

    /**
     * No further instances allowed
     */
    private Pgaccess() {
        super("pgaccess", null);
    }


    /**
     * {@inheritDoc}
     */
    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Sequence<?>> getSequences() {
        List result = new ArrayList();
        result.addAll(getSequences0());
        return result;
    }

    private final List<Sequence<?>> getSequences0() {
        return Arrays.<Sequence<?>>asList(
            Sequences.EXAMPLE_E_LONG_SERIAL_SEQ,
            Sequences.EXAMPLE_E_SERIAL_SEQ,
            Sequences.EXAMPLE_E_SHORT_SERIAL_SEQ);
    }

    @Override
    public final List<Table<?>> getTables() {
        List result = new ArrayList();
        result.addAll(getTables0());
        return result;
    }

    private final List<Table<?>> getTables0() {
        return Arrays.<Table<?>>asList(
            ConferenceV1.CONFERENCE_V1,
            Conference.CONFERENCE,
            Example.EXAMPLE);
    }
}
