/*
 * This file is generated by jOOQ.
 */
package io.en4ble.examples.jooq.tables;


import io.en4ble.examples.converters.ConferenceStateEnumConverter;
import io.en4ble.examples.enums.ConferenceState;
import io.en4ble.examples.jooq.Indexes;
import io.en4ble.examples.jooq.Keys;
import io.en4ble.examples.jooq.Pgaccess;
import io.en4ble.examples.jooq.tables.records.ConferenceRecord;
import io.en4ble.pgaccess.dto.PointDTO;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * A simple conference.
 */
public class Conference extends TableImpl<ConferenceRecord> implements Serializable, Cloneable {

    private static final long serialVersionUID = 418082372;

    /**
     * The reference instance of <code>pgaccess.p_conference</code>
     */
    public static final Conference CONFERENCE = new Conference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConferenceRecord> getRecordType() {
        return ConferenceRecord.class;
    }

    /**
     * The column <code>pgaccess.p_conference.c_id</code>.
     */
// ----- A uuid
    public final TableField<ConferenceRecord, UUID> ID = createField("c_id", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>pgaccess.p_conference.c_created</code>. {{internal}}
     */
// ----- A timestamp
    public final TableField<ConferenceRecord, LocalDateTime> CREATED = createField("c_created", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "{{internal}}");

    /**
     * The column <code>pgaccess.p_conference.c_updated</code>. {{internal}}
     */
// ----- A timestamp
    public final TableField<ConferenceRecord, LocalDateTime> UPDATED = createField("c_updated", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "{{internal}}");

    /**
     * The column <code>pgaccess.p_conference.c_name</code>. The name of the conference. {{minLength=5}}{{maxLength=30}}
     */
// ----- A varchar
    public final TableField<ConferenceRecord, String> NAME = createField("c_name", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "The name of the conference. {{minLength=5}}{{maxLength=30}}");

    /**
     * The column <code>pgaccess.p_conference.c_about</code>. The description of the conference. {{minLength=20}}{{maxLength=2000}}
     */
// ----- A text
    public final TableField<ConferenceRecord, String> ABOUT = createField("c_about", org.jooq.impl.SQLDataType.CLOB, this, "The description of the conference. {{minLength=20}}{{maxLength=2000}}");

    /**
     * The column <code>pgaccess.p_conference.c_start_date</code>.
     */
// ----- A date
    public final TableField<ConferenceRecord, LocalDate> START_DATE = createField("c_start_date", org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>pgaccess.p_conference.c_end_date</code>.
     */
// ----- A date
    public final TableField<ConferenceRecord, LocalDate> END_DATE = createField("c_end_date", org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>pgaccess.p_conference.c_state</code>. {{default=NEW}}{{minLength=3}}{{maxLength=7}}{{readOnly}}
     */
// ----- A varchar
    public final TableField<ConferenceRecord, ConferenceState> STATE = createField("c_state", org.jooq.impl.SQLDataType.VARCHAR(2).defaultValue(org.jooq.impl.DSL.field("'N'::character varying", org.jooq.impl.SQLDataType.VARCHAR)), this, "{{default=NEW}}{{minLength=3}}{{maxLength=7}}{{readOnly}}", new ConferenceStateEnumConverter());

    /**
     * The column <code>pgaccess.p_conference.c_location</code>.
     */
// ----- A point
    public final TableField<ConferenceRecord, PointDTO> LOCATION = createField("c_location", org.jooq.impl.CustomSQLDataType.POINT_DTO, this, "");

    /**
     * Create a <code>pgaccess.p_conference</code> table reference
     */
    public Conference() {
        this(DSL.name("p_conference"), null);
    }

    /**
     * Create an aliased <code>pgaccess.p_conference</code> table reference
     */
    public Conference(String alias) {
        this(DSL.name(alias), CONFERENCE);
    }

    /**
     * Create an aliased <code>pgaccess.p_conference</code> table reference
     */
    public Conference(Name alias) {
        this(alias, CONFERENCE);
    }

    private Conference(Name alias, Table<ConferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private Conference(Name alias, Table<ConferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A simple conference."));
    }

    public <O extends Record> Conference(Table<O> child, ForeignKey<O, ConferenceRecord> key) {
        super(child, key, CONFERENCE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Pgaccess.PGACCESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONFERENCE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConferenceRecord> getPrimaryKey() {
        return Keys.CONFERENCE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConferenceRecord>> getKeys() {
        return Arrays.<UniqueKey<ConferenceRecord>>asList(Keys.CONFERENCE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<ConferenceRecord, LocalDateTime> getRecordTimestamp() {
        return UPDATED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conference as(String alias) {
        return new Conference(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Conference as(Name alias) {
        return new Conference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Conference rename(String name) {
        return new Conference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Conference rename(Name name) {
        return new Conference(name, null);
    }
}
