/*
 * This file is generated by jOOQ.
 */
package io.en4ble.examples.jooq.tables;


import io.en4ble.examples.converters.ConferenceStateEnumConverter;
import io.en4ble.examples.enums.ConferenceState;
import io.en4ble.examples.jooq.Pgaccess;
import io.en4ble.examples.jooq.tables.records.ConferenceV1Record;
import io.en4ble.pgaccess.dto.PointDTO;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
public class ConferenceV1 extends TableImpl<ConferenceV1Record> implements Serializable, Cloneable {

    private static final long serialVersionUID = 286944668;

    /**
     * The reference instance of <code>pgaccess.conference_v1</code>
     */
    public static final ConferenceV1 CONFERENCE_V1 = new ConferenceV1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConferenceV1Record> getRecordType() {
        return ConferenceV1Record.class;
    }

    /**
     * The column <code>pgaccess.conference_v1.id</code>.
     */
// ----- A uuid
    public final TableField<ConferenceV1Record, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>pgaccess.conference_v1.name</code>.
     */
// ----- A varchar
    public final TableField<ConferenceV1Record, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>pgaccess.conference_v1.about</code>.
     */
// ----- A text
    public final TableField<ConferenceV1Record, String> ABOUT = createField(DSL.name("about"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>pgaccess.conference_v1.start_date</code>.
     */
// ----- A date
    public final TableField<ConferenceV1Record, LocalDate> START_DATE = createField(DSL.name("start_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>pgaccess.conference_v1.end_date</code>.
     */
// ----- A date
    public final TableField<ConferenceV1Record, LocalDate> END_DATE = createField(DSL.name("end_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>pgaccess.conference_v1.location</code>.
     */
// ----- A point
    public final TableField<ConferenceV1Record, PointDTO> LOCATION = createField(DSL.name("location"), org.jooq.impl.CustomSQLDataType.POINT_DTO, this, "");

    /**
     * The column <code>pgaccess.conference_v1.state</code>.
     */
// ----- A varchar
    public final TableField<ConferenceV1Record, ConferenceState> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.VARCHAR(2), this, "", new ConferenceStateEnumConverter());

    /**
     * Create a <code>pgaccess.conference_v1</code> table reference
     */
    public ConferenceV1() {
        this(DSL.name("conference_v1"), null);
    }

    /**
     * Create an aliased <code>pgaccess.conference_v1</code> table reference
     */
    public ConferenceV1(String alias) {
        this(DSL.name(alias), CONFERENCE_V1);
    }

    /**
     * Create an aliased <code>pgaccess.conference_v1</code> table reference
     */
    public ConferenceV1(Name alias) {
        this(alias, CONFERENCE_V1);
    }

    private ConferenceV1(Name alias, Table<ConferenceV1Record> aliased) {
        this(alias, aliased, null);
    }

    private ConferenceV1(Name alias, Table<ConferenceV1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ConferenceV1(Table<O> child, ForeignKey<O, ConferenceV1Record> key) {
        super(child, key, CONFERENCE_V1);
    }

    @Override
    public Schema getSchema() {
        return Pgaccess.PGACCESS;
    }

    @Override
    public ConferenceV1 as(String alias) {
        return new ConferenceV1(DSL.name(alias), this);
    }

    @Override
    public ConferenceV1 as(Name alias) {
        return new ConferenceV1(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ConferenceV1 rename(String name) {
        return new ConferenceV1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ConferenceV1 rename(Name name) {
        return new ConferenceV1(name, null);
    }
}
