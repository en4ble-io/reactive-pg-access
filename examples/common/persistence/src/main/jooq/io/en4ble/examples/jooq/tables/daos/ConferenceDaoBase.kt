@file:Suppress("RedundantSemicolon","unused", "RemoveRedundantQualifierName")
/*
 * This file is generated by jOOQ.
 */
package io.en4ble.examples.jooq.tables.daos;


import io.en4ble.examples.enums.ConferenceState;
import io.en4ble.examples.jooq.tables.pojos.ConferenceDto;
import io.en4ble.examples.jooq.tables.records.ConferenceRecord;
import io.en4ble.pgaccess.dto.PointDTO;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.UUID;


/**
 * A simple conference.
 */
abstract class ConferenceDaoBase(dbContext:io.en4ble.pgaccess.DatabaseContext) : io.en4ble.pgaccess.UpdatableAsyncDaoBase<ConferenceRecord, ConferenceDto, java.util.UUID>(dbContext, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, ConferenceDto::class.java),Serializable, Cloneable {
    override fun table(): org.jooq.Table<ConferenceRecord> {
        return io.en4ble.examples.jooq.tables.Conference.CONFERENCE
    }

    /**
     * Fetch records that have <code>c_id IN (values)</code>
     */
    suspend fun readById(vararg values:UUID):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadById(vararg values:UUID, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readById(vararg values:UUID, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadById(vararg values:UUID, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readById(vararg values:UUID, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadById(vararg values:UUID, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }

    /**
     * Read a unique record that has <code>c_id = value</code>
     */
    suspend fun readOneById(value:UUID):ConferenceDto {
        return readOne(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.eq(value),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadOneById(value:UUID, clientId: String?):io.reactivex.Single<ConferenceDto> {
        return rxReadOne(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.eq(value),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readOptionalById(value:UUID):java.util.Optional<ConferenceDto> {
        return readOptional(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.eq(value),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadOptionalById(value:UUID, clientId: String?):io.reactivex.Single<java.util.Optional<ConferenceDto>> {
        return rxReadOptional(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID.eq(value),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }

    /**
     * Fetch records that have <code>c_created IN (values)</code>
     */
    suspend fun readByCreated(vararg values:LocalDateTime):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.CREATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadByCreated(vararg values:LocalDateTime, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.CREATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readByCreated(vararg values:LocalDateTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.CREATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadByCreated(vararg values:LocalDateTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.CREATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readByCreated(vararg values:LocalDateTime, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.CREATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadByCreated(vararg values:LocalDateTime, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.CREATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }
    override fun getUpdatedField(): org.jooq.TableField<ConferenceRecord, LocalDateTime> {
        return io.en4ble.examples.jooq.tables.Conference.CONFERENCE.UPDATED
    }

    /**
     * Fetch records that have <code>c_updated IN (values)</code>
     */
    suspend fun readByUpdated(vararg values:LocalDateTime):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.UPDATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadByUpdated(vararg values:LocalDateTime, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.UPDATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readByUpdated(vararg values:LocalDateTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.UPDATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadByUpdated(vararg values:LocalDateTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.UPDATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readByUpdated(vararg values:LocalDateTime, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.UPDATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadByUpdated(vararg values:LocalDateTime, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.UPDATED.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }

    /**
     * Fetch records that have <code>c_name IN (values)</code>
     */
    suspend fun readByName(vararg values:String):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadByName(vararg values:String, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readByName(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadByName(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readByName(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadByName(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }

    /**
     * Fetch records that have <code>c_about IN (values)</code>
     */
    suspend fun readByAbout(vararg values:String):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadByAbout(vararg values:String, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readByAbout(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadByAbout(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readByAbout(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadByAbout(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }

    /**
     * Fetch records that have <code>c_start_date IN (values)</code>
     */
    suspend fun readByStartDate(vararg values:LocalDate):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadByStartDate(vararg values:LocalDate, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readByStartDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadByStartDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readByStartDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadByStartDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }

    /**
     * Fetch records that have <code>c_end_date IN (values)</code>
     */
    suspend fun readByEndDate(vararg values:LocalDate):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadByEndDate(vararg values:LocalDate, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readByEndDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadByEndDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readByEndDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadByEndDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }

    /**
     * Fetch records that have <code>c_state IN (values)</code>
     */
    suspend fun readByState(vararg values:ConferenceState):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadByState(vararg values:ConferenceState, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readByState(vararg values:ConferenceState, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadByState(vararg values:ConferenceState, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readByState(vararg values:ConferenceState, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadByState(vararg values:ConferenceState, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }

    /**
     * Fetch records that have <code>c_location IN (values)</code>
     */
    suspend fun readByLocation(vararg values:PointDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    fun rxReadByLocation(vararg values:PointDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    suspend fun readByLocation(vararg values:PointDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy)
    }
    fun rxReadByLocation(vararg values:PointDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, orderBy, clientId)
    }
    suspend fun readByLocation(vararg values:PointDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceDto> {
        return read(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page)
    }
    fun rxReadByLocation(vararg values:PointDTO, page: io.en4ble.pgaccess.dto.PagingDTO, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Conference.CONFERENCE.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.Conference.CONFERENCE, page, clientId)
    }
    private val dbFieldMap =
    hashMapOf<String, org.jooq.Field<*>>(
    "id" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ID,
    "created" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.CREATED,
    "updated" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.UPDATED,
    "name" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.NAME,
    "about" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.ABOUT,
    "startDate" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.START_DATE,
    "endDate" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.END_DATE,
    "state" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.STATE,
    "location" to io.en4ble.examples.jooq.tables.Conference.CONFERENCE.LOCATION)
    private fun getOrderFieldNames(): List<String> {
            return dbFieldMap.filterNot { it.value.name.startsWith("internal_") || it.key=="id" }.map { it.key }
    }
    override fun getDbField(dtoField: String): org.jooq.Field<*> {
    return dbFieldMap[dtoField] ?: throw javax.validation.ValidationException("orderBy field '$dtoField' does not exist, must be one of "+getOrderFieldNames().joinToString(","))
    }
    override fun map(row:io.vertx.sqlclient.Row, table:org.jooq.Table<ConferenceRecord>,offset:Int): ConferenceDto {
        return io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(table).toDto(row, offset)
    }
    override fun map(rs:io.vertx.sqlclient.RowSet<io.vertx.sqlclient.Row> , table:org.jooq.Table<ConferenceRecord>, offset:Int): List<ConferenceDto>  {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(table)
        return mapper.toList(rs,offset)
    }
    override fun map(row:io.vertx.sqlclient.Row, offset:Int):ConferenceDto {
        return map(row, io.en4ble.examples.jooq.tables.Conference.CONFERENCE,offset)
    }
    override fun map(row: io.vertx.reactivex.sqlclient.Row, offset:Int):ConferenceDto {
        return map(row.delegate, io.en4ble.examples.jooq.tables.Conference.CONFERENCE,offset)
    }
    override fun map(rs:io.vertx.sqlclient.RowSet<io.vertx.sqlclient.Row> , offset:Int):List<ConferenceDto> {
        return map(rs, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, offset)
    }
    override fun map(rs: io.vertx.reactivex.sqlclient.RowSet<io.vertx.reactivex.sqlclient.Row> , offset:Int):List<ConferenceDto> {
        return map(rs.delegate as io.vertx.sqlclient.RowSet<io.vertx.sqlclient.Row>, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, offset)
    }
    override fun rxReadCount(clientId: String?):io.reactivex.Single<Int> {
    return rxReadCount(dsl.selectCount().from(io.en4ble.examples.jooq.tables.Conference.CONFERENCE), clientId)
    }
    override suspend fun readCount():Int {
    return readCount(dsl.selectCount().from(io.en4ble.examples.jooq.tables.Conference.CONFERENCE))
    }
    override suspend fun read(condition:org.jooq.Condition):List<ConferenceDto> {
    return read(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    override suspend fun read(condition:org.jooq.Condition,client:io.vertx.sqlclient.SqlClient):List<ConferenceDto> {
    return read(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client)
    }
    override fun rxRead(condition:org.jooq.Condition, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
    return rxRead(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    override fun rxRead(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
    return rxRead(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client, clientId)
    }
    override suspend fun read(query:org.jooq.Query):List<ConferenceDto> {
    return read(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    override suspend fun read(query:org.jooq.Query,client:io.vertx.sqlclient.SqlClient):List<ConferenceDto> {
    return read(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client)
    }
    override fun rxRead(query:org.jooq.Query, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
    return rxRead(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    override fun rxRead(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
    return rxRead(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client, clientId)
    }
    override suspend fun readOne(condition:org.jooq.Condition):ConferenceDto {
    return readOne(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    override suspend fun readOne(condition:org.jooq.Condition,client:io.vertx.sqlclient.SqlClient):ConferenceDto {
    return readOne(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client)
    }
    override fun rxReadOne(condition:org.jooq.Condition, clientId: String?):io.reactivex.Single<ConferenceDto> {
    return rxReadOne(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    override fun rxReadOne(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<ConferenceDto> {
    return rxReadOne(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client, clientId)
    }
    override suspend fun readOne(query:org.jooq.Query):ConferenceDto {
    return readOne(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    override suspend fun readOne(query:org.jooq.Query,client:io.vertx.sqlclient.SqlClient):ConferenceDto {
    return readOne(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client)
    }
    override fun rxReadOne(query:org.jooq.Query, clientId: String?):io.reactivex.Single<ConferenceDto> {
    return rxReadOne(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    override fun rxReadOne(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<ConferenceDto> {
    return rxReadOne(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client, clientId)
    }
    override suspend fun readOptional(condition:org.jooq.Condition):java.util.Optional<ConferenceDto> {
    return readOptional(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    override suspend fun readOptional(condition:org.jooq.Condition,client:io.vertx.sqlclient.SqlClient):java.util.Optional<ConferenceDto> {
    return readOptional(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client)
    }
    override fun rxReadOptional(condition:org.jooq.Condition, clientId: String?):io.reactivex.Single<java.util.Optional<ConferenceDto>> {
    return rxReadOptional(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    override fun rxReadOptional(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<java.util.Optional<ConferenceDto>> {
    return rxReadOptional(condition, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client, clientId)
    }
    override suspend fun readOptional(query:org.jooq.Query):java.util.Optional<ConferenceDto> {
    return readOptional(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
    }
    override suspend fun readOptional(query:org.jooq.Query,client:io.vertx.sqlclient.SqlClient):java.util.Optional<ConferenceDto> {
    return readOptional(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client)
    }
    override fun rxReadOptional(query:org.jooq.Query, clientId: String?):io.reactivex.Single<java.util.Optional<ConferenceDto>> {
    return rxReadOptional(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, clientId)
    }
    override fun rxReadOptional(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<java.util.Optional<ConferenceDto>> {
    return rxReadOptional(query, io.en4ble.examples.jooq.tables.Conference.CONFERENCE, client, clientId)
    }
    suspend fun update(dto:ConferenceDto, condition:org.jooq.Condition):Int {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            return io.en4ble.pgaccess.PgAccessConstants.EMPTY_UPDATE_RESULT
        }
        return query(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition)).rowCount()
    }
    fun rxUpdate(dto:ConferenceDto, condition:org.jooq.Condition, clientId: String?):io.reactivex.Single<Int> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            return io.reactivex.Single.just(io.en4ble.pgaccess.PgAccessConstants.EMPTY_UPDATE_RESULT)
        }
        return rxQuery(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition), clientId).map{ it.delegate.rowCount() }
    }
    suspend fun update(dto:ConferenceDto, condition:org.jooq.Condition, client:io.vertx.sqlclient.SqlClient):Int {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            return io.en4ble.pgaccess.PgAccessConstants.EMPTY_UPDATE_RESULT
        }
        return query(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition), client).rowCount()
    }
    fun rxUpdate(dto:ConferenceDto, condition:org.jooq.Condition, client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<Int> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            return io.reactivex.Single.just(io.en4ble.pgaccess.PgAccessConstants.EMPTY_UPDATE_RESULT)
        }
        return rxQuery(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition),client, clientId).map{ it.delegate.rowCount() }
    }
    suspend fun updateReturning(dto:ConferenceDto, condition:org.jooq.Condition):List<ConferenceDto> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        return read(condition)
        }
        return map(query(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields())))
    }
    suspend fun updateReturningOne(dto:ConferenceDto, condition:org.jooq.Condition):ConferenceDto {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        return readOne(condition)
        }
        return map(queryOne(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields())))
    }
    fun rxUpdateReturning(dto:ConferenceDto, condition:org.jooq.Condition, clientId: String?):io.reactivex.Single<List<ConferenceDto>> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        return rxRead(condition)
        }
        return rxQuery(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields()), clientId).map{ map(it.delegate as io.vertx.sqlclient.RowSet<io.vertx.sqlclient.Row>) }
    }
    fun rxUpdateReturningOne(dto:ConferenceDto, condition:org.jooq.Condition, clientId: String?):io.reactivex.Single<ConferenceDto> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        return rxReadOne(condition)
        }
        return rxQueryOne(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields()), clientId).map{ map(it.delegate) }
    }
    suspend fun updateReturning(dto:ConferenceDto, condition:org.jooq.Condition, client:io.vertx.sqlclient.SqlClient):ConferenceDto {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        return readOne(condition)
        }
        return map(queryOne(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields()), client))
    }
    fun rxUpdateReturning(dto:ConferenceDto, condition:org.jooq.Condition, client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<ConferenceDto> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        return rxReadOne(condition)
        }
        return rxQueryOne(dsl.update(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields()),client, clientId).map{ map(it.delegate) }
    }
    suspend fun create(dto:ConferenceDto):Int {
        validate(dto)
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            return io.en4ble.pgaccess.PgAccessConstants.EMPTY_UPDATE_RESULT
        }
        return query(dsl.insertInto(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).columns(map.keys).values(map.values)).rowCount()
    }
    suspend fun create(dto:ConferenceDto, client:io.vertx.sqlclient.SqlClient):Int {
        validate(dto)
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            return io.en4ble.pgaccess.PgAccessConstants.EMPTY_UPDATE_RESULT
        }
        return query(dsl.insertInto(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).columns(map.keys).values(map.values), client).rowCount()
    }
    suspend fun createReturning(dto:ConferenceDto):ConferenceDto {
        validate(dto)
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        }
        return map(queryOne(dsl.insertInto(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).columns(map.keys).values(map.values).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields())))
    }
    suspend fun createReturning(dto:ConferenceDto,client:io.vertx.sqlclient.SqlClient):ConferenceDto {
        validate(dto)
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        }
        return map(queryOne(dsl.insertInto(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).columns(map.keys).values(map.values).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields()), client))
    }
    fun rxCreate(dto:ConferenceDto, clientId: String?):io.reactivex.Single<Int> {
        validate(dto)
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            return io.reactivex.Single.just(io.en4ble.pgaccess.PgAccessConstants.EMPTY_UPDATE_RESULT)
        }
        return rxQuery(dsl.insertInto(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).columns(map.keys).values(map.values), clientId).map{ it.delegate.rowCount() }
    }
    fun rxCreate(dto:ConferenceDto,client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<Int> {
        validate(dto)
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            return io.reactivex.Single.just(io.en4ble.pgaccess.PgAccessConstants.EMPTY_UPDATE_RESULT)
        }
        return rxQuery(dsl.insertInto(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).columns(map.keys).values(map.values), client, clientId).map{ it.delegate.rowCount() }
    }
    fun rxCreateReturning(dto:ConferenceDto, clientId: String?):io.reactivex.Single<ConferenceDto> {
        validate(dto)
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
        }
        return rxQueryOne(dsl.insertInto(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).columns(map.keys).values(map.values).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields()), clientId).map{ map(it.delegate) }
    }
    fun rxCreateReturning(dto:ConferenceDto,client:io.vertx.reactivex.sqlclient.SqlClient, clientId: String?):io.reactivex.Single<ConferenceDto> {
        validate(dto)
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceDto>(io.en4ble.examples.jooq.tables.Conference.CONFERENCE)
        val map = mapper.getValueMap(dto)
        if (map.entries.isEmpty()) {
            LOG.debug("Provided dto is empty: {}",dto.javaClass.simpleName)
            throw io.en4ble.pgaccess.exceptions.NoValuesException("Provided dto is empty: ${dto.javaClass}")
        }
        return rxQueryOne(dsl.insertInto(io.en4ble.examples.jooq.tables.Conference.CONFERENCE).columns(map.keys).values(map.values).returning(*io.en4ble.examples.jooq.tables.Conference.CONFERENCE.fields()), client, clientId).map{ map(it.delegate) }
    }
}
