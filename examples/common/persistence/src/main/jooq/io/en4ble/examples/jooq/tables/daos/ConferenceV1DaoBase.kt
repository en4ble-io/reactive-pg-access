@file:Suppress("RedundantSemicolon","unused", "RemoveRedundantQualifierName")
/*
 * This file is generated by jOOQ.
 */
package io.en4ble.examples.jooq.tables.daos;


import io.en4ble.examples.enums.ConferenceState;
import io.en4ble.examples.jooq.tables.pojos.ConferenceV1Dto;
import io.en4ble.examples.jooq.tables.records.ConferenceV1Record;
import io.en4ble.pgaccess.dto.PointDTO;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
abstract class ConferenceV1DaoBase(dbContext:io.en4ble.pgaccess.DatabaseContext) : io.en4ble.pgaccess.AsyncDaoBase<ConferenceV1Record, ConferenceV1Dto>(dbContext, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, ConferenceV1Dto::class.java),Serializable, Cloneable {
    override fun table(): org.jooq.Table<ConferenceV1Record> {
        return io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1
    }
    suspend fun readOneById(value:UUID):ConferenceV1Dto {
        return readOne(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.eq(value),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadOneById(value:UUID):io.reactivex.Single<ConferenceV1Dto> {
        return rxReadOne(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.eq(value),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    suspend fun readOptionalById(value:UUID):java.util.Optional<ConferenceV1Dto> {
        return readOptional(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.eq(value),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadOptionalById(value:UUID):io.reactivex.Single<java.util.Optional<ConferenceV1Dto>> {
        return rxReadOptional(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.eq(value),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    suspend fun readById(vararg values:UUID):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadById(vararg values:UUID):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    suspend fun readById(vararg values:UUID, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    fun rxReadById(vararg values:UUID, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    suspend fun readById(vararg values:UUID, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }
    fun rxReadById(vararg values:UUID, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    suspend fun readByName(vararg values:String):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadByName(vararg values:String):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    suspend fun readByName(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    fun rxReadByName(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    suspend fun readByName(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }
    fun rxReadByName(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }

    /**
     * Fetch records that have <code>about IN (values)</code>
     */
    suspend fun readByAbout(vararg values:String):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadByAbout(vararg values:String):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    suspend fun readByAbout(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    fun rxReadByAbout(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    suspend fun readByAbout(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }
    fun rxReadByAbout(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ABOUT.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }

    /**
     * Fetch records that have <code>start_date IN (values)</code>
     */
    suspend fun readByStartDate(vararg values:LocalDate):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadByStartDate(vararg values:LocalDate):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    suspend fun readByStartDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    fun rxReadByStartDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    suspend fun readByStartDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }
    fun rxReadByStartDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.START_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }

    /**
     * Fetch records that have <code>end_date IN (values)</code>
     */
    suspend fun readByEndDate(vararg values:LocalDate):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadByEndDate(vararg values:LocalDate):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    suspend fun readByEndDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    fun rxReadByEndDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    suspend fun readByEndDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }
    fun rxReadByEndDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.END_DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }

    /**
     * Fetch records that have <code>location IN (values)</code>
     */
    suspend fun readByLocation(vararg values:PointDTO):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadByLocation(vararg values:PointDTO):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    suspend fun readByLocation(vararg values:PointDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    fun rxReadByLocation(vararg values:PointDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    suspend fun readByLocation(vararg values:PointDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }
    fun rxReadByLocation(vararg values:PointDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.LOCATION.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    suspend fun readByState(vararg values:ConferenceState):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    fun rxReadByState(vararg values:ConferenceState):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    suspend fun readByState(vararg values:ConferenceState, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    fun rxReadByState(vararg values:ConferenceState, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, orderBy)
    }
    suspend fun readByState(vararg values:ConferenceState, page: io.en4ble.pgaccess.dto.PagingDTO):List<ConferenceV1Dto> {
        return read(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }
    fun rxReadByState(vararg values:ConferenceState, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ConferenceV1Dto>> {
        return rxRead(io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, page)
    }
    private val dbFieldMap =
    hashMapOf<String, org.jooq.Field<*>>(
    "id" to io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ID,
    "name" to io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.NAME,
    "about" to io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.ABOUT,
    "startDate" to io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.START_DATE,
    "endDate" to io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.END_DATE,
    "location" to io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.LOCATION,
    "state" to io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1.STATE)
    override fun getDbField(dtoField: String): org.jooq.Field<*> {
    return dbFieldMap[dtoField] ?: throw javax.validation.ValidationException("Unknown field $dtoField")
    }
    override fun map(row:io.vertx.sqlclient.Row, table:org.jooq.Table<ConferenceV1Record>,offset:Int): ConferenceV1Dto {
        return io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceV1Dto>(table).toDto(row, offset)
    }
    override fun map(rs:io.vertx.sqlclient.RowSet, table:org.jooq.Table<ConferenceV1Record>, offset:Int): List<ConferenceV1Dto>  {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ConferenceV1Dto>(table)
        return mapper.toList(rs,offset)
    }
    override fun map(row:io.vertx.sqlclient.Row, offset:Int):ConferenceV1Dto {
        return map(row, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1,offset)
    }
    override fun map(rs:io.vertx.sqlclient.RowSet, offset:Int):List<ConferenceV1Dto> {
        return map(rs, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, offset)
    }
    override suspend fun read(condition:org.jooq.Condition):List<ConferenceV1Dto> {
    return read(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override suspend fun read(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):List<ConferenceV1Dto> {
    return read(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override fun rxRead(condition:org.jooq.Condition):io.reactivex.Single<List<ConferenceV1Dto>> {
    return rxRead(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override fun rxRead(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<List<ConferenceV1Dto>> {
    return rxRead(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override suspend fun read(query:org.jooq.Query):List<ConferenceV1Dto> {
    return read(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override suspend fun read(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):List<ConferenceV1Dto> {
    return read(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override fun rxRead(query:org.jooq.Query):io.reactivex.Single<List<ConferenceV1Dto>> {
    return rxRead(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override fun rxRead(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<List<ConferenceV1Dto>> {
    return rxRead(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override suspend fun readOne(condition:org.jooq.Condition):ConferenceV1Dto {
    return readOne(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override suspend fun readOne(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):ConferenceV1Dto {
    return readOne(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override fun rxReadOne(condition:org.jooq.Condition):io.reactivex.Single<ConferenceV1Dto> {
    return rxReadOne(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override fun rxReadOne(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<ConferenceV1Dto> {
    return rxReadOne(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override suspend fun readOne(query:org.jooq.Query):ConferenceV1Dto {
    return readOne(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override suspend fun readOne(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):ConferenceV1Dto {
    return readOne(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override fun rxReadOne(query:org.jooq.Query):io.reactivex.Single<ConferenceV1Dto> {
    return rxReadOne(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override fun rxReadOne(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<ConferenceV1Dto> {
    return rxReadOne(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override suspend fun readOptional(condition:org.jooq.Condition):java.util.Optional<ConferenceV1Dto> {
    return readOptional(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override suspend fun readOptional(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):java.util.Optional<ConferenceV1Dto> {
    return readOptional(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override fun rxReadOptional(condition:org.jooq.Condition):io.reactivex.Single<java.util.Optional<ConferenceV1Dto>> {
    return rxReadOptional(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override fun rxReadOptional(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<java.util.Optional<ConferenceV1Dto>> {
    return rxReadOptional(condition, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override suspend fun readOptional(query:org.jooq.Query):java.util.Optional<ConferenceV1Dto> {
    return readOptional(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override suspend fun readOptional(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):java.util.Optional<ConferenceV1Dto> {
    return readOptional(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
    override fun rxReadOptional(query:org.jooq.Query):io.reactivex.Single<java.util.Optional<ConferenceV1Dto>> {
    return rxReadOptional(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1)
    }
    override fun rxReadOptional(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<java.util.Optional<ConferenceV1Dto>> {
    return rxReadOptional(query, io.en4ble.examples.jooq.tables.ConferenceV1.CONFERENCE_V1, client)
    }
}
