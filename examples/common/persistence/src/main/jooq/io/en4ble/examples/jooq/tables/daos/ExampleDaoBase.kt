@file:Suppress("RedundantSemicolon","unused", "RemoveRedundantQualifierName")
/*
 * This file is generated by jOOQ.
 */
package io.en4ble.examples.jooq.tables.daos;


import io.en4ble.examples.dto.TestDTO;
import io.en4ble.examples.jooq.tables.pojos.ExampleDto;
import io.en4ble.examples.jooq.tables.records.ExampleRecord;
import io.en4ble.pgaccess.dto.BoxDTO;
import io.en4ble.pgaccess.dto.CircleDTO;
import io.en4ble.pgaccess.dto.IntervalDTO;
import io.en4ble.pgaccess.dto.LineDTO;
import io.en4ble.pgaccess.dto.LineSegmentDTO;
import io.en4ble.pgaccess.dto.PathDTO;
import io.en4ble.pgaccess.dto.PointDTO;
import io.en4ble.pgaccess.dto.PolygonDTO;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.OffsetTime;
import java.util.UUID;


/**
 * An example table containing all datatypes that are supported by reactive-pg-access.
 */
abstract class ExampleDaoBase(dbContext:io.en4ble.pgaccess.DatabaseContext) : io.en4ble.pgaccess.UpdatableAsyncDaoBase<ExampleRecord, ExampleDto, java.util.UUID>(dbContext, io.en4ble.examples.jooq.tables.Example.EXAMPLE, ExampleDto::class.java),Serializable, Cloneable {
    override fun table(): org.jooq.Table<ExampleRecord> {
        return io.en4ble.examples.jooq.tables.Example.EXAMPLE
    }

    /**
     * Fetch records that have <code>e_uuid IN (values)</code>
     */
    suspend fun readByUuid(vararg values:UUID):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByUuid(vararg values:UUID):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByUuid(vararg values:UUID, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByUuid(vararg values:UUID, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByUuid(vararg values:UUID, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByUuid(vararg values:UUID, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Read a unique record that has <code>e_uuid = value</code>
     */
    suspend fun readOneByUuid(value:UUID):ExampleDto {
        return readOne(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.eq(value),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadOneByUuid(value:UUID):io.reactivex.Single<ExampleDto> {
        return rxReadOne(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.eq(value),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readOptionalByUuid(value:UUID):java.util.Optional<ExampleDto> {
        return readOptional(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.eq(value),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadOptionalByUuid(value:UUID):io.reactivex.Single<java.util.Optional<ExampleDto>> {
        return rxReadOptional(io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID.eq(value),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }

    /**
     * Fetch records that have <code>e_text IN (values)</code>
     */
    suspend fun readByText(vararg values:String):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TEXT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByText(vararg values:String):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TEXT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByText(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TEXT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByText(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TEXT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByText(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TEXT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByText(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TEXT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_string IN (values)</code>
     */
    suspend fun readByString(vararg values:String):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STRING.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByString(vararg values:String):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STRING.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByString(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STRING.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByString(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STRING.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByString(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STRING.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByString(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STRING.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_short_value IN (values)</code>
     */
    suspend fun readByShortValue(vararg values:Short):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByShortValue(vararg values:Short):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByShortValue(vararg values:Short, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByShortValue(vararg values:Short, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByShortValue(vararg values:Short, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByShortValue(vararg values:Short, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_integer_value IN (values)</code>
     */
    suspend fun readByIntegerValue(vararg values:Int):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTEGER_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByIntegerValue(vararg values:Int):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTEGER_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByIntegerValue(vararg values:Int, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTEGER_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByIntegerValue(vararg values:Int, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTEGER_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByIntegerValue(vararg values:Int, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTEGER_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByIntegerValue(vararg values:Int, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTEGER_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_long_value IN (values)</code>
     */
    suspend fun readByLongValue(vararg values:Long):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByLongValue(vararg values:Long):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByLongValue(vararg values:Long, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByLongValue(vararg values:Long, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByLongValue(vararg values:Long, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByLongValue(vararg values:Long, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_float_value IN (values)</code>
     */
    suspend fun readByFloatValue(vararg values:Float):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.FLOAT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByFloatValue(vararg values:Float):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.FLOAT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByFloatValue(vararg values:Float, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.FLOAT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByFloatValue(vararg values:Float, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.FLOAT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByFloatValue(vararg values:Float, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.FLOAT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByFloatValue(vararg values:Float, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.FLOAT_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_double_value IN (values)</code>
     */
    suspend fun readByDoubleValue(vararg values:Double):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DOUBLE_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByDoubleValue(vararg values:Double):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DOUBLE_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByDoubleValue(vararg values:Double, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DOUBLE_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByDoubleValue(vararg values:Double, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DOUBLE_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByDoubleValue(vararg values:Double, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DOUBLE_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByDoubleValue(vararg values:Double, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DOUBLE_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_boolean_value IN (values)</code>
     */
    suspend fun readByBooleanValue(vararg values:Boolean):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOOLEAN_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByBooleanValue(vararg values:Boolean):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOOLEAN_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByBooleanValue(vararg values:Boolean, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOOLEAN_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByBooleanValue(vararg values:Boolean, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOOLEAN_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByBooleanValue(vararg values:Boolean, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOOLEAN_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByBooleanValue(vararg values:Boolean, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOOLEAN_VALUE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_date IN (values)</code>
     */
    suspend fun readByDate(vararg values:LocalDate):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByDate(vararg values:LocalDate):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByDate(vararg values:LocalDate, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByDate(vararg values:LocalDate, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_time IN (values)</code>
     */
    suspend fun readByTime(vararg values:LocalTime):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByTime(vararg values:LocalTime):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByTime(vararg values:LocalTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByTime(vararg values:LocalTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByTime(vararg values:LocalTime, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByTime(vararg values:LocalTime, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_timetz IN (values)</code>
     */
    suspend fun readByTimetz(vararg values:OffsetTime):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByTimetz(vararg values:OffsetTime):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByTimetz(vararg values:OffsetTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByTimetz(vararg values:OffsetTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByTimetz(vararg values:OffsetTime, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByTimetz(vararg values:OffsetTime, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_date_time IN (values)</code>
     */
    suspend fun readByDateTime(vararg values:LocalDateTime):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByDateTime(vararg values:LocalDateTime):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByDateTime(vararg values:LocalDateTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByDateTime(vararg values:LocalDateTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByDateTime(vararg values:LocalDateTime, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByDateTime(vararg values:LocalDateTime, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_date_timetz IN (values)</code>
     */
    suspend fun readByDateTimetz(vararg values:OffsetDateTime):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByDateTimetz(vararg values:OffsetDateTime):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByDateTimetz(vararg values:OffsetDateTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByDateTimetz(vararg values:OffsetDateTime, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByDateTimetz(vararg values:OffsetDateTime, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByDateTimetz(vararg values:OffsetDateTime, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIMETZ.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_jsonb IN (values)</code>
     */
    suspend fun readByJsonb(vararg values:TestDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.JSONB.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByJsonb(vararg values:TestDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.JSONB.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByJsonb(vararg values:TestDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.JSONB.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByJsonb(vararg values:TestDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.JSONB.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByJsonb(vararg values:TestDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.JSONB.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByJsonb(vararg values:TestDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.JSONB.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_point IN (values)</code>
     */
    suspend fun readByPoint(vararg values:PointDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POINT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByPoint(vararg values:PointDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POINT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByPoint(vararg values:PointDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POINT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByPoint(vararg values:PointDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POINT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByPoint(vararg values:PointDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POINT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByPoint(vararg values:PointDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POINT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_line IN (values)</code>
     */
    suspend fun readByLine(vararg values:LineDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByLine(vararg values:LineDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByLine(vararg values:LineDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByLine(vararg values:LineDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByLine(vararg values:LineDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByLine(vararg values:LineDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_line_segment IN (values)</code>
     */
    suspend fun readByLineSegment(vararg values:LineSegmentDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_SEGMENT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByLineSegment(vararg values:LineSegmentDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_SEGMENT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByLineSegment(vararg values:LineSegmentDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_SEGMENT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByLineSegment(vararg values:LineSegmentDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_SEGMENT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByLineSegment(vararg values:LineSegmentDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_SEGMENT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByLineSegment(vararg values:LineSegmentDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_SEGMENT.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_box IN (values)</code>
     */
    suspend fun readByBox(vararg values:BoxDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOX.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByBox(vararg values:BoxDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOX.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByBox(vararg values:BoxDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOX.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByBox(vararg values:BoxDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOX.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByBox(vararg values:BoxDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOX.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByBox(vararg values:BoxDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOX.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_path IN (values)</code>
     */
    suspend fun readByPath(vararg values:PathDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.PATH.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByPath(vararg values:PathDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.PATH.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByPath(vararg values:PathDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.PATH.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByPath(vararg values:PathDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.PATH.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByPath(vararg values:PathDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.PATH.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByPath(vararg values:PathDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.PATH.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_polygon IN (values)</code>
     */
    suspend fun readByPolygon(vararg values:PolygonDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POLYGON.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByPolygon(vararg values:PolygonDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POLYGON.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByPolygon(vararg values:PolygonDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POLYGON.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByPolygon(vararg values:PolygonDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POLYGON.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByPolygon(vararg values:PolygonDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POLYGON.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByPolygon(vararg values:PolygonDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.POLYGON.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_circle IN (values)</code>
     */
    suspend fun readByCircle(vararg values:CircleDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.CIRCLE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByCircle(vararg values:CircleDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.CIRCLE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByCircle(vararg values:CircleDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.CIRCLE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByCircle(vararg values:CircleDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.CIRCLE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByCircle(vararg values:CircleDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.CIRCLE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByCircle(vararg values:CircleDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.CIRCLE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_name IN (values)</code>
     */
    suspend fun readByName(vararg values:String):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByName(vararg values:String):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByName(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByName(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByName(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByName(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.NAME.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_interval IN (values)</code>
     */
    suspend fun readByInterval(vararg values:IntervalDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTERVAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByInterval(vararg values:IntervalDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTERVAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByInterval(vararg values:IntervalDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTERVAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByInterval(vararg values:IntervalDTO, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTERVAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByInterval(vararg values:IntervalDTO, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTERVAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByInterval(vararg values:IntervalDTO, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTERVAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_short_serial IN (values)</code>
     */
    suspend fun readByShortSerial(vararg values:Short):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByShortSerial(vararg values:Short):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByShortSerial(vararg values:Short, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByShortSerial(vararg values:Short, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByShortSerial(vararg values:Short, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByShortSerial(vararg values:Short, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_serial IN (values)</code>
     */
    suspend fun readBySerial(vararg values:Int):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadBySerial(vararg values:Int):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readBySerial(vararg values:Int, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadBySerial(vararg values:Int, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readBySerial(vararg values:Int, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadBySerial(vararg values:Int, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_long_serial IN (values)</code>
     */
    suspend fun readByLongSerial(vararg values:Long):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByLongSerial(vararg values:Long):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByLongSerial(vararg values:Long, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByLongSerial(vararg values:Long, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByLongSerial(vararg values:Long, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByLongSerial(vararg values:Long, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_SERIAL.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }

    /**
     * Fetch records that have <code>e_state IN (values)</code>
     */
    suspend fun readByState(vararg values:String):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    fun rxReadByState(vararg values:String):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    suspend fun readByState(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    fun rxReadByState(vararg values:String, orderBy: List<io.en4ble.pgaccess.dto.OrderDTO>):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, orderBy)
    }
    suspend fun readByState(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):List<ExampleDto> {
        return read(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    fun rxReadByState(vararg values:String, page: io.en4ble.pgaccess.dto.PagingDTO):io.reactivex.Single<List<ExampleDto>> {
        return rxRead(io.en4ble.examples.jooq.tables.Example.EXAMPLE.STATE.`in`(values.toList()),io.en4ble.examples.jooq.tables.Example.EXAMPLE, page)
    }
    private val dbFieldMap =
    hashMapOf<String, org.jooq.Field<*>>(
    "uuid" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID,
    "uuidArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.UUID_ARRAY,
    "text" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.TEXT,
    "textArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.TEXT_ARRAY,
    "string" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.STRING,
    "stringArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.STRING_ARRAY,
    "shortValue" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_VALUE,
    "shortArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_ARRAY,
    "integerValue" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTEGER_VALUE,
    "integerArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTEGER_ARRAY,
    "longValue" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_VALUE,
    "longArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_ARRAY,
    "floatValue" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.FLOAT_VALUE,
    "floatArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.FLOAT_ARRAY,
    "doubleValue" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.DOUBLE_VALUE,
    "doubleArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.DOUBLE_ARRAY,
    "booleanValue" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOOLEAN_VALUE,
    "booleanArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOOLEAN_ARRAY,
    "date" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE,
    "dateArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_ARRAY,
    "time" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIME,
    "timeArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIME_ARRAY,
    "timetz" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIMETZ,
    "timetzArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.TIMETZ_ARRAY,
    "dateTime" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIME,
    "dateTimeArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIME_ARRAY,
    "dateTimetz" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIMETZ,
    "dateTimetzArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.DATE_TIMETZ_ARRAY,
    "jsonb" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.JSONB,
    "point" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.POINT,
    "pointArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.POINT_ARRAY,
    "line" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE,
    "lineArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_ARRAY,
    "lineSegment" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_SEGMENT,
    "lineSegmentArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.LINE_SEGMENT_ARRAY,
    "box" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOX,
    "boxArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.BOX_ARRAY,
    "path" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.PATH,
    "pathArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.PATH_ARRAY,
    "polygon" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.POLYGON,
    "polygonArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.POLYGON_ARRAY,
    "circle" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.CIRCLE,
    "circleArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.CIRCLE_ARRAY,
    "name" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.NAME,
    "nameArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.NAME_ARRAY,
    "interval" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTERVAL,
    "intervalArray" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.INTERVAL_ARRAY,
    "shortSerial" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.SHORT_SERIAL,
    "serial" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.SERIAL,
    "longSerial" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.LONG_SERIAL,
    "state" to io.en4ble.examples.jooq.tables.Example.EXAMPLE.STATE)
    override fun getDbField(dtoField: String): org.jooq.Field<*> {
    return dbFieldMap[dtoField] ?: throw javax.validation.ValidationException("Unknown field $dtoField")
    }
    override fun map(row:io.vertx.sqlclient.Row, table:org.jooq.Table<ExampleRecord>,offset:Int): ExampleDto {
        return io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(table).toDto(row, offset)
    }
    override fun map(rs:io.vertx.sqlclient.RowSet, table:org.jooq.Table<ExampleRecord>, offset:Int): List<ExampleDto>  {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(table)
        return mapper.toList(rs,offset)
    }
    override fun map(row:io.vertx.sqlclient.Row, offset:Int):ExampleDto {
        return map(row, io.en4ble.examples.jooq.tables.Example.EXAMPLE,offset)
    }
    override fun map(rs:io.vertx.sqlclient.RowSet, offset:Int):List<ExampleDto> {
        return map(rs, io.en4ble.examples.jooq.tables.Example.EXAMPLE, offset)
    }
    override suspend fun read(condition:org.jooq.Condition):List<ExampleDto> {
    return read(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override suspend fun read(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):List<ExampleDto> {
    return read(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override fun rxRead(condition:org.jooq.Condition):io.reactivex.Single<List<ExampleDto>> {
    return rxRead(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override fun rxRead(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<List<ExampleDto>> {
    return rxRead(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override suspend fun read(query:org.jooq.Query):List<ExampleDto> {
    return read(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override suspend fun read(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):List<ExampleDto> {
    return read(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override fun rxRead(query:org.jooq.Query):io.reactivex.Single<List<ExampleDto>> {
    return rxRead(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override fun rxRead(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<List<ExampleDto>> {
    return rxRead(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override suspend fun readOne(condition:org.jooq.Condition):ExampleDto {
    return readOne(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override suspend fun readOne(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):ExampleDto {
    return readOne(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override fun rxReadOne(condition:org.jooq.Condition):io.reactivex.Single<ExampleDto> {
    return rxReadOne(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override fun rxReadOne(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<ExampleDto> {
    return rxReadOne(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override suspend fun readOne(query:org.jooq.Query):ExampleDto {
    return readOne(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override suspend fun readOne(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):ExampleDto {
    return readOne(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override fun rxReadOne(query:org.jooq.Query):io.reactivex.Single<ExampleDto> {
    return rxReadOne(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override fun rxReadOne(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<ExampleDto> {
    return rxReadOne(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override suspend fun readOptional(condition:org.jooq.Condition):java.util.Optional<ExampleDto> {
    return readOptional(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override suspend fun readOptional(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):java.util.Optional<ExampleDto> {
    return readOptional(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override fun rxReadOptional(condition:org.jooq.Condition):io.reactivex.Single<java.util.Optional<ExampleDto>> {
    return rxReadOptional(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override fun rxReadOptional(condition:org.jooq.Condition,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<java.util.Optional<ExampleDto>> {
    return rxReadOptional(condition, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override suspend fun readOptional(query:org.jooq.Query):java.util.Optional<ExampleDto> {
    return readOptional(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override suspend fun readOptional(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):java.util.Optional<ExampleDto> {
    return readOptional(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    override fun rxReadOptional(query:org.jooq.Query):io.reactivex.Single<java.util.Optional<ExampleDto>> {
    return rxReadOptional(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE)
    }
    override fun rxReadOptional(query:org.jooq.Query,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<java.util.Optional<ExampleDto>> {
    return rxReadOptional(query, io.en4ble.examples.jooq.tables.Example.EXAMPLE, client)
    }
    suspend fun update(dto:ExampleDto, condition:org.jooq.Condition):Int {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return query(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition)).rowCount()
    }
    fun rxUpdate(dto:ExampleDto, condition:org.jooq.Condition):io.reactivex.Single<Int> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return rxQuery(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition)).map{ it.delegate.rowCount() }
    }
    suspend fun update(dto:ExampleDto, condition:org.jooq.Condition, client:io.vertx.reactivex.sqlclient.SqlClient):Int {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return query(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition), client).rowCount()
    }
    fun rxUpdate(dto:ExampleDto, condition:org.jooq.Condition, client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<Int> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return rxQuery(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition),client).map{ it.delegate.rowCount() }
    }
    suspend fun updateReturning(dto:ExampleDto, condition:org.jooq.Condition):List<ExampleDto> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return map(query(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields())))
    }
    suspend fun updateReturningOne(dto:ExampleDto, condition:org.jooq.Condition):ExampleDto {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return map(queryOne(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields())))
    }
    fun rxUpdateReturning(dto:ExampleDto, condition:org.jooq.Condition):io.reactivex.Single<List<ExampleDto>> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return rxQuery(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields())).map{ map(it.delegate) }
    }
    fun rxUpdateReturningOne(dto:ExampleDto, condition:org.jooq.Condition):io.reactivex.Single<ExampleDto> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return rxQueryOne(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields())).map{ map(it.delegate) }
    }
    suspend fun updateReturning(dto:ExampleDto, condition:org.jooq.Condition, client:io.vertx.reactivex.sqlclient.SqlClient):ExampleDto {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return map(queryOne(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields()), client))
    }
    fun rxUpdateReturning(dto:ExampleDto, condition:org.jooq.Condition, client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<ExampleDto> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return rxQueryOne(dsl.update(io.en4ble.examples.jooq.tables.Example.EXAMPLE).set(map).where(condition).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields()),client).map{ map(it.delegate) }
    }
    suspend fun create(dto:ExampleDto):Int {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
        return query(dsl.insertInto(io.en4ble.examples.jooq.tables.Example.EXAMPLE).columns(map.keys).values(map.values)).rowCount()
    }
    suspend fun create(dto:ExampleDto,client:io.vertx.reactivex.sqlclient.SqlClient):Int {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
    return query(dsl.insertInto(io.en4ble.examples.jooq.tables.Example.EXAMPLE).columns(map.keys).values(map.values), client).rowCount()
    }
    suspend fun createReturning(dto:ExampleDto):ExampleDto {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
    return map(queryOne(dsl.insertInto(io.en4ble.examples.jooq.tables.Example.EXAMPLE).columns(map.keys).values(map.values).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields())))
    }
    suspend fun createReturning(dto:ExampleDto,client:io.vertx.reactivex.sqlclient.SqlClient):ExampleDto {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
    return map(queryOne(dsl.insertInto(io.en4ble.examples.jooq.tables.Example.EXAMPLE).columns(map.keys).values(map.values).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields()), client))
    }
    fun rxCreate(dto:ExampleDto):io.reactivex.Single<Int> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
    return rxQuery(dsl.insertInto(io.en4ble.examples.jooq.tables.Example.EXAMPLE).columns(map.keys).values(map.values)).map{ it.delegate.rowCount() }
    }
    fun rxCreate(dto:ExampleDto,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<Int> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
    return rxQuery(dsl.insertInto(io.en4ble.examples.jooq.tables.Example.EXAMPLE).columns(map.keys).values(map.values), client).map{ it.delegate.rowCount() }
    }
    fun rxCreateReturning(dto:ExampleDto):io.reactivex.Single<ExampleDto> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
    return rxQueryOne(dsl.insertInto(io.en4ble.examples.jooq.tables.Example.EXAMPLE).columns(map.keys).values(map.values).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields())).map{ map(it.delegate) }
    }
    fun rxCreateReturning(dto:ExampleDto,client:io.vertx.reactivex.sqlclient.SqlClient):io.reactivex.Single<ExampleDto> {
        val mapper = io.en4ble.examples.jooq.tables.mappers.PgaccessMappers.getMapper<ExampleDto>(io.en4ble.examples.jooq.tables.Example.EXAMPLE)
        val map = mapper.getValueMap(dto)
    return rxQueryOne(dsl.insertInto(io.en4ble.examples.jooq.tables.Example.EXAMPLE).columns(map.keys).values(map.values).returning(*io.en4ble.examples.jooq.tables.Example.EXAMPLE.fields()), client).map{ map(it.delegate) }
    }
}
