import groovy.xml.MarkupBuilder
import org.jooq.codegen.GenerationTool

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath "io.en4ble.reactive-pg-access:reactive-pg-access-generator:$reactivePgAccessVersion"
        classpath "org.postgresql:postgresql:$postgresqlVersion"
    }
}
plugins {
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id "application"
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "org.jetbrains.kotlin.kapt" version "1.3.50"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.50"
    id 'org.liquibase.gradle' version '2.0.0'
}


version "0.1"
group "io.en4ble.examples"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

dependencyManagement {
    imports {
        mavenBom 'io.micronaut:micronaut-bom:1.2.2'
    }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt "io.micronaut:micronaut-graal"
    kapt "io.micronaut.configuration:micronaut-openapi"

    compile("io.en4ble.examples:persistence:$version")

    compile "org.postgresql:postgresql:$postgresqlVersion"
//    compile 'io.micronaut.configuration:micronaut-liquibase'
    compile('org.liquibase:liquibase-core:' + liquibaseVersion)
    compile "io.swagger.core.v3:swagger-annotations"
    compile 'io.micronaut.configuration:micronaut-hibernate-validator'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinxVersion"
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$kotlinxVersion"

    compile "io.en4ble.reactive-pg-access:reactive-pg-access-generator:$reactivePgAccessVersion"


    liquibaseRuntime "org.liquibase:liquibase-core:$liquibaseVersion"
    liquibaseRuntime "org.postgresql:postgresql:$postgresqlVersion"

    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-runtime"
    compileOnly "com.oracle.substratevm:svm"
    kapt "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"

    kaptTest "io.micronaut:micronaut-inject-java"
    testCompile "org.junit.jupiter:junit-jupiter-api"
    testCompile "io.micronaut.test:micronaut-test-junit5"
    testCompile "org.jetbrains.spek:spek-api:1.1.5"
    testRuntime "org.junit.jupiter:junit-jupiter-engine"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:1.1.5"
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/kotlin'
            srcDirs 'src/main/java'
            srcDirs 'src/main/jooq'
        }
    }
}

test.classpath += configurations.developmentOnly

mainClassName = "io.en4ble.micronaut.example.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
        javaParameters = true
    }
}

def dbUser = 'postgres'
def dbPassword = 'postgres'
def dbSchema = 'example'

// runs liquibase from gradle
// NOTE that you need to set a symbolic link that points to the db directory
// from the server directory since the liquibase gradle plugin cannot handle relative paths
liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/example/master.yaml'
            url 'jdbc:postgresql://localhost:5432/postgres'
            username dbUser
            password dbPassword
            defaultSchemaName dbSchema
        }
    }
}

task jooqGenerate {
    doLast() {
        def writer = new StringWriter()
        def xml = new MarkupBuilder(writer)
                .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.0.xsd') {
                    jdbc {
                        driver('org.postgresql.Driver')
                        url('jdbc:postgresql://localhost:5432/postgres')
                        user(dbUser)
                        password(dbPassword)
                    }
                    generator {
                        name('io.en4ble.pgaccess.generator.AsyncJooqWithOpenapiJavaGenerator')
                        database {
                            name('org.jooq.meta.postgres.PostgresDatabase')
                            excludes('databasechangelog|databasechangeloglock')
                            recordTimestampFields('.*_updated')
                            inputSchema(dbSchema)
                            includeTables(true)
                            includeRoutines(true)
                            includePackages(false)
                            includeUDTs(true)
                            includeSequences(true)
                            forcedTypes {
                                forcedType {
                                    userType('io.en4ble.micronaut.example.enums.ConferenceState')
                                    converter('io.en4ble.micronaut.example.enums.ConferenceStateEnumConverter')
                                    expression('.*\\.e_conference\\.c_state')
                                }
//                                forcedType {
//                                    userType('io.en4ble.pgaccess.dto.PointDTO')
//                                    binding('io.en4ble.pgaccess.converters.PostgresPointBinding')
//                                    expression('.*\\.e_conference\\.c_location')
//                                }
//                                forcedType {
//                                    userType('io.en4ble.pgaccess.dto.PointDTO')
//                                    binding('io.en4ble.pgaccess.converters.PostgresPointBinding')
//                                    expression('.*\\.conference_v1\\.location')
//                                }
                                forcedType {
                                    userType('io.en4ble.micronaut.example.enums.ConferenceState')
                                    converter('io.en4ble.micronaut.example.enums.ConferenceStateEnumConverter')
                                    expression('.*\\.conference_v1\\.state')
                                }
                            }
                        }
                        generate([:]) {
                            deprecated false
                            records true
                            interfaces false
                            fluentSetters true
                            pojos true
                            daos true
                            javaTimeTypes true
                        }
                        target() {
                            packageName('io.en4ble.micronaut.example.jooq')
                            directory("$projectDir/src/main/jooq")
                        }
                        strategy {
                            name('io.en4ble.pgaccess.generator.TablePrefixAwareGeneratorStrategy')
                        }
                    }
                }
        GenerationTool.generate(writer.toString())
    }
}
